---
title: "Pythonのプロジェクトの始め方"
subtitle: ""
description: ""
author: ""
date: "2024-02-15"
categories: [python, venv, rye, pip]
date-modified: "2024-02-15"
engine: knitr
execute: 
  enabled: false
---

# Pythonプロジェクト管理について

Pythonのプロジェクト管理を行うツールとしてはさまざまなものがある。
ここでは、自分が触ってみたものについての簡単なメモを残しておく。

::: {.callout-note}
(2024/2/15) ひとまずRyeを使う。わからなくなったらRyeのところだけ見る。
:::

Pythonプロジェクト/ライブラリをパッケージングするためのエコシステムがあり、
仮想環境の構築や依存関係を管理する機能が多数開発されてきた。
解析を行うだけならばパッケージングに関する知識は必要がないが、
解析環境の管理に、依存関係を管理するツールを使うことができるので、
学んでおく必要がある。

## パッケージング

ライブラリを配布・インストールするために、PEP-517/518で策定された標準に従った形式で、
ライブラリをパッケージ化する作業。
ソースコードを配布する「ソースディストリビューション」と、
ビルド産物を配布する「ビルドディストリビューション」の二つの方式がある。
作成したディストリビューションはPython Package Index (PyPI)に登録することで公開できる。

## 依存関係の管理

ライブラリで使用する依存関係の解決。

## 仮想環境の提供

プロジェクトごとに環境を分離するための仕組みを提供する。
依存関係にあるライブラリを分離するだけでなく、場合によってはPythonインタプリタ自体も
管理することができるものもある。

## 関連ツールのリスト

* `setuptools`, `easy_install`: パッケージング、ライブラリインストール
* `virtualenv`, `venv`: 仮想環境
* `pip`: ライブラリインストール
* `pipenv`: 仮想環境、ライブラリインストール
* `pyenv`: インタプリタ管理
* `conda`: インタプリタ管理、仮想環境、ライブラリインストール (`pip`, `venv`と併用しない)
* `poetry`: パッケージング、仮想環境、ライブラリインストール
* `pdm`: パッケージング、仮想環境、ライブラリインストール
* `rye`: 全て

## 参考

* [Pythonのパッケージングと配布の全体像](https://zenn.dev/zerebom/articles/60d5ad4b18c901)
  - パッケージングについての解説
* [Environment Tools: PDM, Poetry and Rye](https://www.playfulpython.com/environment-tools-pdm-poetry-rye/)
  - `poetry`, `pdm`, `rye`についての簡単な解説

# `venv`
`venv`はPython3の標準ライブラリに入っている、仮想環境を構築・管理するライブラリ。
別の仮想環境管理ライブラリ`virtualenv`のサブセットが公式に取り込まれた。

## 仮想環境の作成

適当なディレクトリを作成し、その中に入ってシェルで以下のコマンドを実行すると、
仮想環境が作成される。

```{bash}
python3 -m venv .venv
```

上の例では、".venv" が仮想環境を保存するディレクトリ名となっていて、
これは自由に変更したり、あるいは複数作成することができる。

## 仮想環境への切り替え

作成した仮想環境に切り替えるときには、`.venv/bin/activate`を実行する。

```{bash}
. .venv/bin/activate
```

`.venv/bin/activate`は`bash`のスクリプトで、`.venv/bin`にパスを通す。
`.venv/bin`には、仮想環境作成時に使用した`python`へのシンボリックリンクがあり、
仮想環境内での`python`の実行ではこのリンクが呼び出される。

また、`.venv/bin/activate`では、`deactivate`関数が定義されており、
仮想環境内でこの`deactivate`を呼ぶことで、仮想環境を抜けることができる。

`venv`が仮想環境を実現する実際の動きは以下のサイトの記事が参考になる。

* [https://endy-tech.hatenablog.jp/entry/how_venv_works_in_python](https://endy-tech.hatenablog.jp/entry/how_venv_works_in_python)

## ライブラリのインストール

`pip`を利用した外部ライブラリのインストールは、以下のコマンドで行う。

```{bash}
python3 -m pip install hogehoge
```

仮想環境内でインストールしたライブラリは`.venv/lib`に配置され、
検索もここから行われる。

## 仮想環境の終了

仮想環境の終了は、仮想環境内で以下の関数を呼び出すことでできる。

```{bash}
deactivate
```

## 仮想環境の共有

仮想環境で使用しているライブラリ一覧を作成して、別の場所で環境を共有することができる。
ライブラリ一覧の作成とインストールは、仮想環境内で次のコマンドを実行することでできる。

```{bash}
# ライブラリ一覧の作成
python3 -m pip freeze > requirements.txt

# `requirements.txt`に記載されたライブラリのインストール
python3 -m pip install -r requirements.txt
```

# `pip`
## `pip`モジュールがない時

Pythonインタプリタから`pip`モジュールを実行したときに、
`pip`モジュールが無い旨のエラーメッセージが出た場合は`ensurepip`を先に実行する。

`ensurepip`はすでに`pip`コマンドがインストールされている場合はそれを利用し、
まだインストールされていない場合は適切なものをインストールする。

```{bash}
# モジュールがなくて失敗
python -m pip install hogehoge
#> /path/to/.venv/bin/python: No module named pip

# `ensurepip`を実行
python -m ensurepip
```

# Rye
## プロジェクト作成

```{bash}
# プロジェクト作成
rye init project_name

# 使用するPythonインタプリタのバージョン指定
rye pin 3.12

# 指定したPythonインタプリタのインストール
rye sync
```

以上を実行すると、以下のようなディレクトリ・ファイルが作成される。

```{default}
project_name/
├── .python-version
├── requirements.lock
├── requirements-dev.lock
├── README.md
├── pyproject.toml
├── src/
|   └── my_project
|       └── __init__.py
└── .venv/
```

この中では`virtualenv`による仮想化が有効になっており、
プロジェクト内で実行するPythonインタプリタも自動で切り替わる。

## ライブラリの管理

`rye`でインストールされるPythonインタプリタには、`pip`モジュールが含まれていない。
プロジェクトで依存するモジュールの追加・削除は、`rye`のサブコマンドで行う。

```{bash}
# 依存の追加
rye add flask
rye add "flask>=2.0"

# 依存の削除
rye remove flask

# 依存のインストール・アンインストールの実行
rye sync
```

## プロジェクトの確認

```{bash}
rye show
rye show --installed-deps
```

## プロジェクトの設定

Ryeは`pyproject.toml`で設定を行う。
`pyproject.toml`はPEP-518で提案されたファイル名およびフォーマットで、
Pythonプロジェクトのビルド依存関係を指定する方法を規定する。
標準策定の経緯は以下のリンク先の記事が参考になる。

* [Python パッケージングの標準を知ろう](https://blog.recruit.co.jp/rls/2019-12-25-python-packaging-specs/)

ここで重要なのは、3rd partyのツールはそれぞれのツールの独自設定を、
`pyproject.toml`内の`tool.${ツール名}`テーブルに記録し利用することができることである。
つまりRye独自の設定は`tool.rye.~~~`に記録される。

* `project.dependencies`
  - 依存関係が記録される。`rye add`, `rye remove`で自動的に修正される。
* `project.scripts`
  - 環境にインストールされるスクリプトを指定する。指定したスクリプトは`rye sync`した後に`rye run ~~~`で実行することができる。

* `tool.rye.dev-dependencies`
  - 開発環境でのみ必要となる依存関係。`rye add --dev`で修正できる。

## 仮想環境

仮想環境に入るには`venv`を同じように、`. .venv/bin/activate`を実行すれば良い。
`rye sync`を実行していれば、仮想環境内ではRyeが提供するツールチェインや、
設定で定義したコマンドを実行できる。
仮想環境を抜ける時は、環境内で`deactivate`を実行すればよい。

```{bash}
# 仮想環境の有効化
rye sync
. .venv/bin/activate

# 環境内で実行できるコマンドのリスト
rye run --list

# 仮想環境の無効化
deactivate
```
