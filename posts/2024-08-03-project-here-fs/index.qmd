---
title: "R ProjectとRでのファイル操作"
subtitle: ""
description: ""
author: ""
date: "2024-08-03"
categories: [R, RStudio, fs, here]
draft: false
code-annotations: hover
---

Rで解析するときには、データの取り込みや解析結果の出力のためにファイルの入出力が伴うことがほとんどだろう。
ファイルを取り扱うためにはファイルパスを適切に指定する必要があるが、
むやみにファイルパスを直接指定しているとエラーの原因になりかねない。

ここでは、そのようなパス操作を安全で楽にするために、
RStudioの機能のひとつであるプロジェクト機能やファイル・パス操作関連の話題を紹介する。

# Projectの利用とWorking directoryの設定

Working directory (長いのでWDとする）とはプログラムが動作するディレクトリ（フォルダ）のことで、
プログラムはWDを起点としてファイルなどを探す。
自分が動作させているプログラムがどこをWDとしているのかは、常に意識しておく必要がある。

`setwd()`関数を使うことでWDを変更することができるが、
むやみにWDを変更することはエラーの原因になりやすいので、使用はなるべく控えたほうがよいだろう。

しかし、解析を始めようとRを起動したときに必要なファイルを集めたディレクトリにWDを設定したほうが解析がやりやすいのは事実である。
そのような時に、Project機能を活用することでWDの設定を簡単に行うことが出来る。

ProjectはRStudioの機能のひとつで、RStudioのメニューから「File / New Project...」を選ぶことで作成ができる。
Projectを作成すると（新しくディレクトリを作るか、既存のディレクトリを設定するかのどちらかで）、
作成したProjectディレクトリの中に`プロジェクト名.Rproj`というファイルが作成される。
そしてこの`.Rproj`ファイルをダブルクリックすることで、
作成したProjectディレクトリをWDに設定した状態でRStudioを起動することができる。
基本的に`.Rproj`ファイルからRStudioを起動するとよい。

このようにすれば`setwd()`を起動時に使う必要はなくなるので、
あとは原則このWDから動かないようにコードを書くことでWDを移動することに起因するバグを防ぐことができる。

# `here`パッケージ

RStudioでプロジェクト機能を使っている状態であれば、`here`パッケージの`here::here()`関数を使うことで、
簡単に`.Rproj`ファイルがあるディレクトリのパスが文字列で得られる。

```{r}
here::here()
```

- 参考URL
    - [`here`](https://here.r-lib.org/)
    - [hereパッケージの導入でファイル参照のパス問題の悩みを解消](https://uribo.hatenablog.com/entry/2018/01/25/082000)

# ファイル、パスの操作（`fs`パッケージ）

基本的に`fs`パッケージの関数を用いる。
WindowsとMacではパスの区切り文字などが異なるが、
`fs`パッケージを使うことでそのような違いをパッケージ側で対処することができる。

`fs::path()`を用いて、ファイル・ディレクトリパスを作成するには次のようにする。
一つ目の引数を`here::here()`にすることで、Projectディレクトリをまるごと共有する際の面倒を減らすことができる。

```{r}
fs::path(here::here(), "Desktop", "result.txt")
```

`fs`パッケージでは多くの便利な関数が提供されている。
例えば、`fs::dir_ls()`と`fs::path_file()`を使って、フォルダ内のcsvファイルをまとめて読み込み、
ファイル名の列を追加してから、1つの`data.frame`に結合する操作は、次のように書くことができる。

```{r}
#| code-fold: false
#| eval: false
fs::path(here::here(), "output") |> # <1>
  fs::dir_ls(, regexp = ".csv$") |> # <2>
  purrr::set_names(nm = ~ fs::path_file(.x)) |> # <3>
  purrr::map(readr::read_csv) |> # <4>
  purrr::imap(~ dplyr::mutate(.x, file = .y)) |> # <5>
  dplyr::bind_rows() # <6>
```

1. csvファイルがあるフォルダ（`{WD}/output`）のパスを作成
2. 1のフォルダにあるすべてのcsvファイルのパスのベクトルを取得
3. ベクトルの要素名をファイル名に変更
4. すべてのcsvファイルを読み込む
5. それぞれのdata.frameにファイル名を持つ列を追加
6. すべてのdata.frameを縦に連結（ただしすべてのcsvファイルが同じ列をもっている必要がある）

# Rスクリプト内でのパス操作を楽にする

Rで解析した結果（グラフなど）を、解析ごとに分けて特定のディレクトリの中に出力しておきたいことがよくある。
ただし、ファイルを複数出力する時に、何度も出力先のディレクトリまで書いたパスを記述するのはわずらわしい。
`here`, `fs`パッケージを活用するとプロジェクト内でのパス操作を楽にすることができる。
私は普段以下のような数行のコードをスクリプトの最初の方に書いておく。

```{r}
#| eval: false
wd <- here::here()                                   # ワーキングディレクトリ
dir_out <- fs::path("data", "output")                # 出力先ディレクトリ
path_out <- function(...) fs::path(wd, dir_out, ...) # パス作成関数を定義
fs::dir_create(path_out())                           # 出力先ディレクトリの作成
```

```{r}
#| echo: false
wd <- here::here()
dir_out <- fs::path("data", "output")
path_out <- function(...) fs::path(wd, dir_out, ...)
```

2行目の出力先ディレクトリ（`dir_out`）はスクリプトごとに適当に変更する。

ここでは、作成した複数のグラフやデータを出力したファイルを出力先ディレクトリ以下に保存したいとする。
しかし、何度も出力先ディレクトリまで書いたパスを記述するのは大変だし、
むやみに`setwd()`でWDを移動するのはリスクとなる。
この時、3行目で定義した`path_out()`関数にファイル名を渡すと、
出力先ディレクトリまでを自動で入力したパスを得ることができる。
これを使えば以下のようにスクリプト内での出力ファイルのパス入力が簡単になる。

```{r}
#| results: hold
path_out()
path_out("important.txt")
path_out("plot", "bar_plot.png")
```

# Sessioninfo

```{r}
sessionInfo()
```
